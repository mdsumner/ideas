o sp Lines and Points with more than two (X/Y) coordinates

o n-dimensional b-box

o extent/bbox with projection (why is this not obvious?, what am I missing)

o (I think we maybe got this around 2015) robust "transform if needed" in R

what happens here?  

project(project(x, proj, inv = TRUE), proj, inv = TRUE)

proj4string(x) <- CRS("+proj=longlat +datum=WGS84")
spTransform(x, CRS("+proj=longlat +datum=NAD83"))

proj4string(x) <- CRS("+proj=laea")
spTransform(x, CRS("+proj=laea"))

This is a general problem also with round-tripping in GDAL etc. the "only WKT is enough" thing, discussed: 

http://lists.osgeo.org/pipermail/gdal-dev/2015-April/041467.html
http://lists.osgeo.org/pipermail/gdal-dev/2012-November/034558.html


o on the fly reprojection for graphics

plot(x, add = TRUE) ## what if the plot is not in projection(x)? 

one package does register its projection against an existing graphics device (fields/mapproj?)

- perhaps this is done like this with a wrapper, like with() or animation::saveHTML

projectIfNeeded(global = transform_to, {
   plot(x)
   area(y)
   et.c
   })
   
   
## grist for the mill

https://stat.ethz.ch/pipermail/r-sig-geo/2015-June/022942.html

This is a key disconnnect in this discussion, NetCDF will happily store a date-time dimension, but not this hacky dimname workaround.  Layer names are *not* the right (NetCDF-ish) way to do this, NetCDF has *dimensions* - essentially array margins matching a single variable  that you put coordinates into, in a variable of 1-D to match the margin it's applied to. It's very general, albeit very primitive. You can even store it as numbers with metadata specifying the epoch and unit and calendar, I can't see why storing date-times as text would ever be considered a good idea. 

GIS sees "layers" where NetCDF sees a third dimension.  Time is a dimension, which means the latter is the right way. What about when you have more than one attribute per time step (like RGB, or U/V vector components)? In GIS, it is still "layers" with a hacky workaround , in NetCDF it's another 3D variable - one 3D array for each attribute. This is quite a limited model, since - why not allow multiple attributes and multiple dimensions in the same variable? - but still it's coherent within the NetCDF concept. You just can't shoehorn these layernames in a sensible way, which is why Raster* has a slot for z values. 
Does the setZ() approach not work for NetCDF files written with writeRaster()? I would explore making that work. 

   
   


